apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: limitsandrequestsarerequired
  annotations:
    metadata.gatekeeper.sh/title: Limits and requests are required
    description: >-
      This policy validates that all containers have set memory and CPU requests and limits.
      Resource requests prevents resource starvation of the pod, if other pods on node are misbehaving.
      Resource limits specifies maximum quantity of resources that can be aquired by given container, defending other pods from resource starvation.
      Only presence of settings is checked, can be set to arbitrary value.
spec:
  crd:
    spec:
      names:
        kind: LimitsAndRequestsAreRequired
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            This policy validates that all containers have set memory and CPU requests and limits.
            Resource requests prevents resource starvation of the pod, if other pods on node are misbehaving.
            Resource limits specifies maximum quantity of resources that can be aquired by given container, defending other pods from resource starvation.
            Only presence of settings is checked, can be set to arbitrary value.
          properties:
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package limitsAndRequestsAreRequired

        violation[{"msg": msg, "details": {}}] {
            container := input.review.object.spec.containers[_]
            not container.resources.requests["memory"]
            msg := sprintf("container <%v> has not specified memory requests", [container.name])
        }

        violation[{"msg": msg, "details": {}}] {
            container := input.review.object.spec.containers[_]
            not container.resources.requests["cpu"]
            msg := sprintf("container <%v> has not specified cpu requests", [container.name])
        }

        violation[{"msg": msg, "details": {}}] {
            container := input.review.object.spec.containers[_]
            not container.resources.limits["memory"]
            msg := sprintf("container <%v> has not specified memory limits", [container.name])
        }

        violation[{"msg": msg, "details": {}}] {
            container := input.review.object.spec.containers[_]
            not container.resources.limits["cpu"]
            msg := sprintf("container <%v> has not specified cpu limits", [container.name])
        }