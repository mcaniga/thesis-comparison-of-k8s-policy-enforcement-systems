apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: rootfilesystemisreadonly
  annotations:
    metadata.gatekeeper.sh/title: Root filesystem is readonly
    description: >-
      This policy validates that containers define a securityContext
      with `readOnlyRootFilesystem: true`. If filesystem is writeable, 
      container process can manipulate with filesystem, modify and 
      delete important files - eg. configuration 
spec:
  crd:
    spec:
      names:
        kind: RootFilesystemIsReadOnly
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            This policy validates that containers define a securityContext
            with `readOnlyRootFilesystem: true`. If filesystem is writeable, 
            container process can manipulate with filesystem, modify and 
            delete important files - eg. configuration 
          properties:
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package rootFilesystemIsReadOnly

        violation[{"msg": msg, "details": {}}] {
            container := input.review.object.spec.containers[_]
            not container.securityContext
            container.securityContext.readOnlyRootFilesystem == false
            msg := sprintf("only read-only root filesystem container is allowed: %v", [container.name])
        }